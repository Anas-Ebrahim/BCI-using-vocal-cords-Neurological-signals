
UART_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002e2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 000000f0  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001f5  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007a4  00000000  00000000  00000653  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002f8  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000066d  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000328  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000317  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macinfo 00006d26  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00008c21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  7a:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_VoidInit>:


/*******************************ADC_VoidInit***********************************/
extern void ADC_VoidInit(void)
{
	ADMUX_Register=ADC_u8ADMUXVoltage;
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
	ADCSRA_Register=ADC_u8ADPSPrescalerBits;
  86:	87 e0       	ldi	r24, 0x07	; 7
  88:	86 b9       	out	0x06, r24	; 6
	ADC_VoidEnable();
}
/*******************************ADC_VoidEnable***********************************/
extern void ADC_VoidEnable(void)
{
	ADCSRA_ADEN=ADC_u8EnableADC;
  8a:	37 9a       	sbi	0x06, 7	; 6
extern void ADC_VoidInit(void)
{
	ADMUX_Register=ADC_u8ADMUXVoltage;
	ADCSRA_Register=ADC_u8ADPSPrescalerBits;
	ADC_VoidEnable();
}
  8c:	08 95       	ret

0000008e <ADC_VoidEnable>:
/*******************************ADC_VoidEnable***********************************/
extern void ADC_VoidEnable(void)
{
	ADCSRA_ADEN=ADC_u8EnableADC;
  8e:	37 9a       	sbi	0x06, 7	; 6
}
  90:	08 95       	ret

00000092 <ADC_VoidDisable>:
/*******************************ADC_VoidDisable***********************************/
extern void ADC_VoidDisable(void)
{
	ADCSRA_ADEN=ADC_u8DisableADC;
  92:	37 98       	cbi	0x06, 7	; 6
}
  94:	08 95       	ret

00000096 <ADC_u16ReadChannel>:
extern u16 ADC_u16ReadChannel(u8 Channel )
{
	u16 ADC_u16ReadADC;
	u8 Local_u8LowBit;

	ADMUX_Register=(ADMUX_Register&0xF0)|Channel; // selecting channel
  96:	97 b1       	in	r25, 0x07	; 7
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	98 2b       	or	r25, r24
  9c:	97 b9       	out	0x07, r25	; 7

	#if ADC_u8Channel8_10==ADC_u8Bit8
			ADMUX_ADLAR=ADC_u8LeftAdjusted;
  9e:	3d 9a       	sbi	0x07, 5	; 7
			ADCSRA_ADSC=ADC_u8StartConversion;
  a0:	36 9a       	sbi	0x06, 6	; 6
			while(ADCSRA_ADIF==ADC_u8NotCompleteConversion);
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_u16ReadChannel+0xc>
			ADC_u16ReadADC=ADCH;
  a6:	85 b1       	in	r24, 0x05	; 5
			#endif
    #endif
	//ADCSRA_ADIF=ADC_u8Clear;

	return ADC_u16ReadADC;
}
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <DIO_VoidInit>:
	//return 0;
//}
/*****************************DIO_VoidInit***********************************/
extern void DIO_VoidInit(void)
{
	DDRA=DIO_u8PORTADIR;//ELY ANA BSHAER 3LEH 5LEH BL2IMH DEH
  ac:	1a ba       	out	0x1a, r1	; 26
	DDRB=DIO_u8PORTBDIR;
  ae:	17 ba       	out	0x17, r1	; 23
	DDRC=DIO_u8PORTCDIR;
  b0:	14 ba       	out	0x14, r1	; 20
	DDRD=DIO_u8PORTDDIR;
  b2:	11 ba       	out	0x11, r1	; 17

	/*Comment!:karnouf map  */
	PORTA=(DIO_u8PORTAVAL & DIO_u8PORTADIR ) | (PORTA & (~DIO_u8PORTADIR));
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8b bb       	out	0x1b, r24	; 27
	PORTB=(DIO_u8PORTBVAL & DIO_u8PORTBDIR ) | (PORTB & (~DIO_u8PORTBDIR));
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	88 bb       	out	0x18, r24	; 24
	PORTC=(DIO_u8PORTCVAL & DIO_u8PORTCDIR ) | (PORTC & (~DIO_u8PORTCDIR));
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	85 bb       	out	0x15, r24	; 21
	PORTD=(DIO_u8PORTDVAL & DIO_u8PORTDDIR ) | (PORTD & (~DIO_u8PORTDDIR));
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	82 bb       	out	0x12, r24	; 18

}
  c4:	08 95       	ret

000000c6 <DIO_u8ReadPinVal>:
/*****************************DIO_u8ReadPinVal***********************************/

extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToVal )
{
  c6:	db 01       	movw	r26, r22
	u8 Local_u8Status,Local_u8Port,Local_u8Pin;
	if(Copy_u8PinIdx < DIO_u8NumberAllPins)
  c8:	80 32       	cpi	r24, 0x20	; 32
  ca:	10 f0       	brcs	.+4      	; 0xd0 <DIO_u8ReadPinVal+0xa>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret
	{
		Local_u8Port=Copy_u8PinIdx / DIO_u8NumberOfPin;
		Local_u8Pin= Copy_u8PinIdx % DIO_u8NumberOfPin;
		*Copy_u8PtrToVal=Get_Bit(*DIO_u8ArrPIN[Local_u8Port],Local_u8Pin);
  d0:	e8 2f       	mov	r30, r24
  d2:	e6 95       	lsr	r30
  d4:	e6 95       	lsr	r30
  d6:	e6 95       	lsr	r30
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e0 59       	subi	r30, 0x90	; 144
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	01 90       	ld	r0, Z+
  e4:	f0 81       	ld	r31, Z
  e6:	e0 2d       	mov	r30, r0
  e8:	20 81       	ld	r18, Z
  ea:	48 2f       	mov	r20, r24
  ec:	47 70       	andi	r20, 0x07	; 7
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	04 2e       	mov	r0, r20
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_u8ReadPinVal+0x36>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_u8ReadPinVal+0x32>
 100:	28 23       	and	r18, r24
 102:	39 23       	and	r19, r25
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_u8ReadPinVal+0x44>
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
 10a:	4a 95       	dec	r20
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_u8ReadPinVal+0x40>
 10e:	2c 93       	st	X, r18
 110:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8Status=Error;
	}
	return Local_u8Status;
}
 112:	08 95       	ret

00000114 <DIO_u8WritePinVal>:
/*****************************DIO_u8WritePinVal***********************************/
extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8PinToVal )
{
		u8 Local_u8Status,Local_u8Port,Local_u8Pin;
		if(Copy_u8PinIdx < DIO_u8NumberAllPins)
 114:	80 32       	cpi	r24, 0x20	; 32
 116:	10 f0       	brcs	.+4      	; 0x11c <DIO_u8WritePinVal+0x8>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
		{
			Local_u8Port=Copy_u8PinIdx / DIO_u8NumberOfPin;
			Local_u8Pin= Copy_u8PinIdx % DIO_u8NumberOfPin;
 11c:	38 2f       	mov	r19, r24
 11e:	37 70       	andi	r19, 0x07	; 7
extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8PinToVal )
{
		u8 Local_u8Status,Local_u8Port,Local_u8Pin;
		if(Copy_u8PinIdx < DIO_u8NumberAllPins)
		{
			Local_u8Port=Copy_u8PinIdx / DIO_u8NumberOfPin;
 120:	86 95       	lsr	r24
 122:	86 95       	lsr	r24
 124:	86 95       	lsr	r24
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
			Local_u8Pin= Copy_u8PinIdx % DIO_u8NumberOfPin;
			if(Copy_u8PinToVal==DIO_u8LOW)
 12a:	66 23       	and	r22, r22
 12c:	a1 f4       	brne	.+40     	; 0x156 <DIO_u8WritePinVal+0x42>
			{
				Clr_Bit(*DIO_u8ArrPORT[Local_u8Port],Local_u8Pin);
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e0 5a       	subi	r30, 0xA0	; 160
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	01 90       	ld	r0, Z+
 138:	f0 81       	ld	r31, Z
 13a:	e0 2d       	mov	r30, r0
 13c:	20 81       	ld	r18, Z
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_u8WritePinVal+0x34>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	3a 95       	dec	r19
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_u8WritePinVal+0x30>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	80 83       	st	Z, r24
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
			}
			else
			{
				Set_Bit(*DIO_u8ArrPORT[Local_u8Port],Local_u8Pin);
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	01 90       	ld	r0, Z+
 160:	f0 81       	ld	r31, Z
 162:	e0 2d       	mov	r30, r0
 164:	20 81       	ld	r18, Z
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8WritePinVal+0x5c>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	3a 95       	dec	r19
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8WritePinVal+0x58>
 174:	28 2b       	or	r18, r24
 176:	20 83       	st	Z, r18
 178:	81 e0       	ldi	r24, 0x01	; 1
		{
			Local_u8Status=Error;
		}
		return Local_u8Status;

}
 17a:	08 95       	ret

0000017c <DIO_u8ReadPortVal>:
/*****************************DIO_u8ReadPortVal***********************************/

extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToVal )
{
 17c:	db 01       	movw	r26, r22
	u8 Local_u8Status;

	if(Copy_u8PortIdx < DIO_u8NumberOfPort)
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	10 f0       	brcs	.+4      	; 0x186 <DIO_u8ReadPortVal+0xa>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
	{
		*Copy_u8PtrToVal=*DIO_u8ArrPIN[Copy_u8PortIdx];
 186:	e8 2f       	mov	r30, r24
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e0 59       	subi	r30, 0x90	; 144
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	01 90       	ld	r0, Z+
 194:	f0 81       	ld	r31, Z
 196:	e0 2d       	mov	r30, r0
 198:	80 81       	ld	r24, Z
 19a:	8c 93       	st	X, r24
 19c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8Status=Error;
	}
	return Local_u8Status;
}
 19e:	08 95       	ret

000001a0 <DIO_u8WritePortVal>:
/*****************************DIO_u8WritePortVal***********************************/

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToVal )
{
 1a0:	db 01       	movw	r26, r22
		u8 Local_u8Status;

		if(Copy_u8PortIdx < DIO_u8NumberOfPort)
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <DIO_u8WritePortVal+0xa>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	08 95       	ret
		{
			*DIO_u8ArrPORT[Copy_u8PortIdx]=*Copy_u8PtrToVal;
 1aa:	e8 2f       	mov	r30, r24
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	e0 5a       	subi	r30, 0xA0	; 160
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	01 90       	ld	r0, Z+
 1b8:	f0 81       	ld	r31, Z
 1ba:	e0 2d       	mov	r30, r0
 1bc:	8c 91       	ld	r24, X
 1be:	80 83       	st	Z, r24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
		{
			Local_u8Status=Error;
		}
		return Local_u8Status;

}
 1c2:	08 95       	ret

000001c4 <DIO_u8WritePinDir>:
/*****************************DIO_u8ReadPortDir***********************************/
extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
			u8 Local_u8Status,Local_u8Port,Local_u8Pin;
			if(Copy_u8PinIdx < DIO_u8NumberAllPins)
 1c4:	80 32       	cpi	r24, 0x20	; 32
 1c6:	f8 f4       	brcc	.+62     	; 0x206 <DIO_u8WritePinDir+0x42>
			{
				Local_u8Port=Copy_u8PinIdx / DIO_u8NumberOfPin;
				Local_u8Pin= Copy_u8PinIdx % DIO_u8NumberOfPin;
				Assign_Bit(*DIO_u8ArrDDR[Local_u8Port],Local_u8Pin,Copy_u8PinDir);
 1c8:	e8 2f       	mov	r30, r24
 1ca:	e6 95       	lsr	r30
 1cc:	e6 95       	lsr	r30
 1ce:	e6 95       	lsr	r30
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e8 59       	subi	r30, 0x98	; 152
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	01 90       	ld	r0, Z+
 1dc:	f0 81       	ld	r31, Z
 1de:	e0 2d       	mov	r30, r0
 1e0:	30 81       	ld	r19, Z
 1e2:	28 2f       	mov	r18, r24
 1e4:	27 70       	andi	r18, 0x07	; 7
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8WritePinDir+0x2e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8WritePinDir+0x2a>
 1f6:	80 95       	com	r24
 1f8:	83 23       	and	r24, r19
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <DIO_u8WritePinDir+0x3a>
 1fc:	66 0f       	add	r22, r22
 1fe:	2a 95       	dec	r18
 200:	ea f7       	brpl	.-6      	; 0x1fc <DIO_u8WritePinDir+0x38>
 202:	86 2b       	or	r24, r22
 204:	80 83       	st	Z, r24
			else
			{
				Local_u8Status=Error;
			}
			return Local_u8Status;
}
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret

0000020a <DIO_u8WritePortDir>:
/*****************************DIO_u8WritePortDir***********************************/

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
				u8 Local_u8Status;//,Local_u8Port;
				if(Copy_u8PortIdx < DIO_u8NumberOfPort)
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	50 f4       	brcc	.+20     	; 0x222 <DIO_u8WritePortDir+0x18>
				{
					//Local_u8Port=Copy_u8PortIdx / DIO_u8NumberOfPin;
					Assign_Reg(*DIO_u8ArrDDR[Copy_u8PortIdx],Copy_u8PortDir);
 20e:	e8 2f       	mov	r30, r24
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	e8 59       	subi	r30, 0x98	; 152
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	01 90       	ld	r0, Z+
 21c:	f0 81       	ld	r31, Z
 21e:	e0 2d       	mov	r30, r0
 220:	60 83       	st	Z, r22
				{
					Local_u8Status=Error;
				}
				return Local_u8Status;

}
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret

00000226 <DIO_u8ReadPinDir>:
/*****************************DIO_u8ReadPinDir***********************************/

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8* Copy_u8PinDir)
{
 226:	db 01       	movw	r26, r22
				u8 Local_u8Status,Local_u8Port,Local_u8Pin;
				if(Copy_u8PinIdx < DIO_u8NumberAllPins)
 228:	80 32       	cpi	r24, 0x20	; 32
 22a:	f8 f4       	brcc	.+62     	; 0x26a <DIO_u8ReadPinDir+0x44>
				{
					Local_u8Port=Copy_u8PinIdx / DIO_u8NumberOfPin;
					Local_u8Pin= Copy_u8PinIdx % DIO_u8NumberOfPin;
					*Copy_u8PinDir=Get_Bit(*DIO_u8ArrDDR[Local_u8Port],Local_u8Port);
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	86 95       	lsr	r24
 232:	48 2f       	mov	r20, r24
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	fa 01       	movw	r30, r20
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	e8 59       	subi	r30, 0x98	; 152
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	01 90       	ld	r0, Z+
 242:	f0 81       	ld	r31, Z
 244:	e0 2d       	mov	r30, r0
 246:	80 81       	ld	r24, Z
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	04 2e       	mov	r0, r20
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_u8ReadPinDir+0x30>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_u8ReadPinDir+0x2c>
 25a:	82 23       	and	r24, r18
 25c:	93 23       	and	r25, r19
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8ReadPinDir+0x3e>
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	4a 95       	dec	r20
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_u8ReadPinDir+0x3a>
 268:	8c 93       	st	X, r24
				else
				{
					Local_u8Status=Error;
				}
				return Local_u8Status;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	08 95       	ret

0000026e <DIO_u8ReadPortDir>:
/*****************************DIO_u8ReadPortDir***********************************/

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8* Copy_u8PortDir)
{
 26e:	db 01       	movw	r26, r22
		u8 Local_u8Status;

		if(Copy_u8PortIdx < DIO_u8NumberOfPort)
 270:	84 30       	cpi	r24, 0x04	; 4
 272:	10 f0       	brcs	.+4      	; 0x278 <DIO_u8ReadPortDir+0xa>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
		{
			*Copy_u8PortDir=*DIO_u8ArrDDR[Copy_u8PortIdx];
 278:	e8 2f       	mov	r30, r24
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e8 59       	subi	r30, 0x98	; 152
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	01 90       	ld	r0, Z+
 286:	f0 81       	ld	r31, Z
 288:	e0 2d       	mov	r30, r0
 28a:	80 81       	ld	r24, Z
 28c:	8c 93       	st	X, r24
 28e:	81 e0       	ldi	r24, 0x01	; 1
		{
			Local_u8Status=Error;
		}
		return Local_u8Status;

}
 290:	08 95       	ret

00000292 <UART_voidInit>:
		ongoing transmissions during the period the registers are changed. The TXC Flag can be used
		to check that the Transmitter has completed all transfers, and the RXC Flag can be used to
		check that there are no unread data in the receive buffer. Note that the TXC Flag must be
		cleared before each transmission (before UDR is written) if it is used for this purpose.
   */
   UCSRB = (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
 296:	86 e8       	ldi	r24, 0x86	; 134
 298:	80 bd       	out	0x20, r24	; 32

   UBRRH = (BAUD_PRESCALE >> 8); //25// Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 29a:	10 b8       	out	0x00, r1	; 0
   UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 29c:	89 e1       	ldi	r24, 0x19	; 25
 29e:	89 b9       	out	0x09, r24	; 9
 }
 2a0:	08 95       	ret

000002a2 <UART_voidTransmit>:
/**************************************/
void UART_voidTransmit( u8 Data )
{
    /* Wait for empty transmit buffer */
    while(!( UCSRA & (1<<UDRE) ));
 2a2:	5d 9b       	sbis	0x0b, 5	; 11
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <UART_voidTransmit>

    /* Put data into buffer, sends the data */
    UDR = Data;
 2a6:	8c b9       	out	0x0c, r24	; 12
}
 2a8:	08 95       	ret

000002aa <UART_voidSendFromArrayWithNullCh>:
/****************************************/
void UART_voidSendFromArrayWithNullCh(u8 *Sent)
 {
 2aa:	fc 01       	movw	r30, r24
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <UART_voidSendFromArrayWithNullCh+0xc>
 }
/**************************************/
void UART_voidTransmit( u8 Data )
{
    /* Wait for empty transmit buffer */
    while(!( UCSRA & (1<<UDRE) ));
 2ae:	5d 9b       	sbis	0x0b, 5	; 11
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <UART_voidSendFromArrayWithNullCh+0x4>
/****************************************/
void UART_voidSendFromArrayWithNullCh(u8 *Sent)
 {
    while(*Sent != '\0')
        {
    		UART_voidTransmit(*Sent++);
 2b2:	31 96       	adiw	r30, 0x01	; 1
{
    /* Wait for empty transmit buffer */
    while(!( UCSRA & (1<<UDRE) ));

    /* Put data into buffer, sends the data */
    UDR = Data;
 2b4:	8c b9       	out	0x0c, r24	; 12
}
/****************************************/
void UART_voidSendFromArrayWithNullCh(u8 *Sent)
 {
    while(*Sent != '\0')
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	c9 f7       	brne	.-14     	; 0x2ae <UART_voidSendFromArrayWithNullCh+0x4>
        {
    		UART_voidTransmit(*Sent++);
        }
 }
 2bc:	08 95       	ret

000002be <UART_u8Receive>:
/****************************************/
u8 UART_u8Receive( void )
    {
        /* Wait for data to be received */
        while ( !(UCSRA & (1<<RXC)) );
 2be:	5f 9b       	sbis	0x0b, 7	; 11
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <UART_u8Receive>
        /* Get and return received data from buffer */
        return UDR;
 2c2:	8c b1       	in	r24, 0x0c	; 12
    }
 2c4:	08 95       	ret

000002c6 <main>:
#include "UART_interface.h"
#include "delay.h"

int main (void)
{
	DIO_VoidInit();
 2c6:	0e 94 56 00 	call	0xac	; 0xac <DIO_VoidInit>
	ADC_VoidInit();
 2ca:	0e 94 41 00 	call	0x82	; 0x82 <ADC_VoidInit>
	UART_voidInit();
 2ce:	0e 94 49 01 	call	0x292	; 0x292 <UART_voidInit>
	//PORTB=ADC_u16ReadChannel(0);

	while(1)
	{
		UART_voidTransmit( ADC_u16ReadChannel(0));
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_u16ReadChannel>
 2d8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_voidTransmit>
 2dc:	fa cf       	rjmp	.-12     	; 0x2d2 <main+0xc>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
